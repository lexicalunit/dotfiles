#!/bin/bash -e

# Cleans system and application caches on macOS.

usage() {
    echo "usage: ${0##*/} [options]" 1>&2
    echo "" 1>&2
    echo "Cleans system and application caches on macOS." 1>&2
    echo ""
    echo "options:"
    echo " -h or --help shows usage help" 1>&2
    exit 1
}

if echo "$*" | grep -Eq -- '--help\b|-h\b'; then
    usage
fi

# shellcheck source=.shell_control
# shellcheck disable=SC1091
source "$HOME/.shell_control" || echo "$(tput bold)error: ~/.shell_control not installed!$(tput sgr0)" >&2

DONE=0
BEFORE="$(df -B1 --output=avail "$HOME" | grep -iv avail)"
show "disk space available before cleanup: $(numfmt --to=iec-i --suffix=B -- "$BEFORE")"

report() {
    if [[ $DONE == 0 ]]; then
        show -i "clean up ended prematurely because a command failed!"
    fi
    AFTER="$(df -B1 --output=avail "$HOME" | grep -iv avail)"
    show "disk space available after cleanup: $(numfmt --to=iec-i --suffix=B -- "$BEFORE")"
    RECLAIMED="$((AFTER - BEFORE))"
    if [[ $RECLAIMED -gt "0" ]]; then
        show "disk space reclaimed by cleanup: $(numfmt --to=iec-i --suffix=B -- "$RECLAIMED")"
    fi
}
trap report EXIT

# grab and hold sudo
sudo -v
while true; do
    sudo -n true
    sleep 60
    kill -0 "$$" || exit
done 2>/dev/null &

# trash
run "sudo rm -rf /Volumes/*/.Trashes/*"
run "sudo rm -rf ~/.Trash/*"

# macos
run "sudo rm -rf /private/var/log/asl/*.asl"
run "sudo rm -rf /Library/Logs/DiagnosticReports/*"
run "rm -rf ~/Library/Containers/com.apple.mail/Data/Library/Logs/Mail/*"
run "rm -rf ~/Library/Logs/CoreSimulator/*"

# adobe
run "sudo rm -rf ~/Library/Application\ Support/Adobe/Common/Media\ Cache\ Files/*"
run "sudo rm -rf /Library/Logs/Adobe/*"

# itunes
run "rm -rf ~/Music/iTunes/iTunes\ Media/Mobile\ Applications/*"
run "rm -rf ~/Library/Application\ Support/MobileSync/Backup/*"

# xcode
run "rm -rf ~/Library/Developer/Xcode/DerivedData/*"
run "rm -rf ~/Library/Developer/Xcode/Archives/*"

# various user caches
test -d "$HOME/.bundle/cache" && run "rm -rf '$_'"
test -d "$HOME/.cache" && run "rm -rf '$_'"
test -d "$HOME/.ccache" && run "rm -rf '$_'"
test -d "$HOME/.electron-gyp" && run "rm -rf '$_'"
test -d "$HOME/.electron" && run "rm -rf '$_'"
test -d "$HOME/.node-gyp" && run "rm -rf '$_'"
test -d "$HOME/.pylint.d" && run "rm -rf '$_'"
test -e "$HOME/.babel.json" && run "rm -f '$_'"

# brew
if command -v brew >/dev/null 2>&1; then
    run "brew cleanup"
    run "rm -rf $(brew --cache)"
    run "brew tap --repair"
fi

# rvm
command -v rvm >/dev/null 2>&1 && run "rvm cleanup all"

# gem
command -v gem >/dev/null 2>&1 && run "gem cleanup"

# cargo
if command -v cargo >/dev/null 2>&1; then
    test -e "$HOME/.cargo/registry" && run "rm -rf '$_'"
    test -e "$HOME/.cargo/git" && run "rm -rf '$_'"
fi

# conda
command -v conda >/dev/null 2>&1 && run "conda clean -a --yes"

# npm
command -v npm >/dev/null 2>&1 && run "npm -g cache clean --force"

# yarn
# command -v yarn >/dev/null 2>&1 && run "yarn -g cache clean --force"

# atom
command -v apm >/dev/null 2>&1 && run "apm clean"

# docker
show "docker: checking if up..."
if command -v docker >/dev/null 2>&1 && docker stats --no-stream >/dev/null 2>&1; then
    run "docker system prune --volumes -f"
else
    show "docker: not up"
fi

# inactive memory
run "sudo purge"

DONE=1
