#!/bin/bash

# Tweak ripgrep to easily search codebases with committed files and files I generally don't search.

if echo "$*" | egrep -q -- "\b--help\b|\b-h\b" || [[ -z "$1" ]]; then
    (
        echo "usage: ${0##*/} [-h|--help] [-z] [-j] [ -- [ripgrep options]] <QUERY>"
        echo "Use ripgrep to search a codebase."
        echo
        echo "options:"
        (
            echo "    -h, --help@ show usage help"
            echo "    -z@ Use ripgrep's --no-ignore option"
            echo "    -j@ Ignore all JavaScript files"
        ) | column -ts@
    ) >&2
    exit 1
fi

if ! type rg >/dev/null 2>&1; then
    echo "error: ripgrep not installed" >&2
    exit 1
fi

# Files I generally never want to search.
BAD=(
    "*.bak"
    "*.css" "*.css.*"
    "*.dat"
    "*.erb"
    "*.json"
    "*.lock"
    "*.min" "*.min.*"
    "*.svg"
    "*.txt"
    "*.yaml" "*.yml"
    "*ignore*"
)

CMD="rg"
while getopts "zj" opt; do
    case "$opt" in
        # If I need to search in .gitignored files.
        z) CMD="$CMD --no-ignore" ;;

        # If I'm searching a non-js codebase with some js files in it.
        j) BAD+=("*.js" "*.js.*") ;;

        # Ignore other opts.
        *) ;;
    esac
done
shift $((OPTIND - 1))

# Build up the ignore file globs arguments.
set -f
for I in ${BAD[*]}; do
    CMD="$CMD -g '"'!'"$I'"
done

# Properly quote args to ripgrep.
ARGS=""
while [[ -n "$1" ]]; do
    ARGS="$ARGS '$1'"
    shift
done

# Pretty print the command we're gonna run.
show() {
    echo -n $'\e[38;5;40m$\e[38;5;63m '
    echo -n "$@"
    echo -n $'\e[0m'
    echo
}
show "$CMD$ARGS"

eval "$CMD" $ARGS
