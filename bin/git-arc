#!/bin/bash

# Tool for archiving and restoring git branches.

usage() {
    (
        echo "usage: ${0##*/} [-h] COMMAND [args]"
        echo "Tool for archiving and restoring git branches."
        echo "options:"
        (
            echo "    -h: show usage help"
        ) | column -ts:
        echo "commands:"
        (
            echo "    list: list archived branches"
            echo "    create BRANCH: create an archive ref for the given BRANCH"
            echo "    delete REF: delete archive for the given REF"
            echo "    restore REF: restore the branch for the given REF"
        ) | column -ts:
    ) >&2
    exit 1
}

if echo "$*" | grep -Eq -- '-h\b'; then
    usage
fi

# shellcheck source=../.shell_control
# shellcheck disable=SC1091
source "$HOME/.shell_control" || echo "$(tput bold)error: ~/.shell_control not installed!$(tput sgr0)" >&2

case "$1" in
create)
    arg="$2"
    if [[ -z $arg ]]; then
        echo "$(tput bold)error: please provide a branch name to archive$(tput sgr0)" >&2
        exit 1
    fi
    run "git update-ref refs/archive/$arg origin/$arg"
    run "git branch -D $arg"
    ;;
list)
    run "git for-each-ref refs/archive"
    ;;
delete)
    arg="$2"
    if [[ -z $arg ]]; then
        echo "$(tput bold)error: please provide a ref name to delete$(tput sgr0)" >&2
        exit 1
    fi
    run "git update-ref -d $arg"
    ;;
restore)
    arg="$2"
    if [[ -z $arg ]]; then
        echo "$(tput bold)error: please provide a ref name to restore$(tput sgr0)" >&2
        exit 1
    fi
    run "git branch $(echo "$arg" | cut -c14-) $arg"
    run "git update-ref -d $arg"
    ;;
*)
    usage
    ;;
esac
