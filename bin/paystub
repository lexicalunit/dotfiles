#!/bin/bash -e

# Get your latest paystub as PDF from Check's API.

usage() {
    (
        echo "usage: ${0##*/} [-h | --help | -n N | -t]"
        echo "Get your latest paystub as PDF from Check's API."
        echo
        echo "options:"
        (
            echo "    -h, --help@ show usage help"
            echo "    -n N@ generate the last N paysubs (default: 1)"
            echo "    -t@ show historical tax information"
        ) | column -ts@
    ) >&2
    exit 1
}

if echo "$*" | grep -Eq -- '--help\b|-h\b'; then
    usage
fi

if [[ -z "$(command -v jq)" ]]; then
    echo "error: jq not installed; please install jq" >&2
    exit 1
fi


USER="$(whoami)"
RENDER_COUNT=1
SHOW_TAXES=0
while getopts "n:t" opt; do
    case "$opt" in
    n) RENDER_COUNT="$OPTARG" ;;
    t) SHOW_TAXES=1 ;;
    *) usage ;;
    esac
done
shift $((OPTIND - 1))

# In Keychain Access create a "New Password Item" with the following details.
# - name: "check_api_key_prod"
# - account: Your macOS user name
# - password: Your Check API key
CHECK_API_KEY_PROD="$(security find-generic-password -a "$USER" -s check_api_key_prod -w 2>/dev/null)"

# Do the same as above for your Check employee id.
CHECK_API_EMPLOYEE_ID_PROD="$(security find-generic-password -a "$USER" -s check_api_employee_id_prod -w 2>/dev/null)"

OUTPUT="$(mktemp -t tmp.XXXXXXXXXX)"
trap 'rm -f $OUTPUT' EXIT

echo -n $'\e[1;34m>\e[0m\e[31m '
echo -n "fetching employee information... "
curl -sS --location "https://api.checkhq.com/employees/$CHECK_API_EMPLOYEE_ID_PROD/paystubs" \
    --header "Authorization: Bearer $CHECK_API_KEY_PROD" \
    --output "$OUTPUT"
echo "done"
echo -n $'\e[0m'

i=0
while [[ $i -lt $RENDER_COUNT ]]; do
    PAYDAY="$(jq -r ".results[$i].payday" <"$OUTPUT")"
    PAYROLL_ID="$(jq -r ".results[$i].payroll" <"$OUTPUT")"
    PAYSTUB="paystub-$PAYDAY.pdf"

    echo -n $'\e[1;34m>\e[0m\e[31m '
    echo -n "rendering $PAYSTUB (payroll: $PAYROLL_ID)... "
    curl -sS --location \
        "https://api.checkhq.com/employees/$CHECK_API_EMPLOYEE_ID_PROD/paystubs/$PAYROLL_ID" \
        --header "Authorization: Bearer $CHECK_API_KEY_PROD" \
        --header "Accept: application/pdf" \
        --output "$PAYSTUB"
    echo "done"
    echo -n $'\e[0m'

    i=$((i + 1))
done

if [[ "$RENDER_COUNT" == "1" ]]; then
    open "$PAYSTUB"
fi

[[ "$SHOW_TAXES" == "1" ]] || exit 0

# show historical tax information including federal and state taxes
TAXES=("Federal Income Tax" "State Tax")
N_PAYSTUBS="$(jq -r '.results | length' <"$OUTPUT")"
(
    # data rows
    for ((i = 0; i < N_PAYSTUBS; i++)); do
        PAYROLL="$(jq -r ".results[$i].payroll" <"$OUTPUT")"
        PAYDAY="$(jq -r ".results[$i].payday" <"$OUTPUT")"
        EARNINGS="$(jq -r ".results[$i].summary.earnings" <"$OUTPUT")"
        echo -n "$PAYROLL|$PAYDAY|$EARNINGS"
        for t in "${TAXES[@]}"; do
            AMOUNT="$(jq -r ".results[$i].employee_taxes[] | select(.description | contains(\"$t\")) | .amount" <"$OUTPUT")"
            echo -n "|$AMOUNT"
        done
        echo
    done

    # header row
    echo -n "Payroll|Payday|Earnings"
    for t in "${TAXES[@]}"; do
        DESC="$(jq -r ".results[0].employee_taxes[] | select(.description | contains(\"$t\")) | .description" <"$OUTPUT")"
        echo -n "|$DESC"
    done
    echo
) | column -t -s'|' | nl | sort -nr | cut -f 2-

if [[ "$(jq -r '.next' <"$OUTPUT")" != "null" ]]; then
    echo "$(tput bold)warning: older paystubs are truncated$(tput sgr0)" >&2
    exit 1
fi
