#!/bin/bash

# Install applications and development environment on an macOS or Linux machine.

################################################################################
# Settings
################################################################################
# BEGIN GENERATED PACKAGE LISTS
HOMEBREW_FORMULAS="                                                            \
    adns autoconf automake avro-tools bash bison boost clang-format cloog      \
    cmake colordiff coreutils cppunit csv-fix diff-so-fancy dmd docker         \
    docker-compose doxygen erlang faac fasd ffmpeg flake8 fontconfig freetype  \
    gd gdbm geoip gettext ghostscript gifsicle git git-flow git-review         \
    git-secrets glib gmp gnu-sed gnu-tar gnupg gnutls gradle hub icu4c id3lib  \
    id3v2 imagemagick@6 isl jasper jbig2dec jez/formulae/pandoc-sidenote jhead \
    jo jpeg jq kafkacat lame libassuan libevent libffi libgcrypt libgpg-error  \
    libgphoto2 libicns libidn2 libksba libmpc libpng librdkafka libssh2        \
    libtasn1 libtiff libtool libunistring libusb libusb-compat libvo-aacenc    \
    libyaml little-cms2 lz4 lzlib makedepend maven md5sha1sum memcached        \
    mongodb mpfr mysql ncftp net-snmp nettle nginx no-more-secrets node npth   \
    nvm onepass oniguruma openssl ossp-uuid p11-kit pandoc pcre                \
    percona-toolkit pidof pinentry pkg-config plotutils pngquant postgresql    \
    protobuf pyenv pyenv-virtualenv pyenv-virtualenvwrapper rabbitmq readline  \
    redis ripgrep rust s3cmd sane-backends sbt scala scons sdl2 sdl2_image     \
    shellcheck sloccount spark sqlite sqliteodbc storm swig tree unixodbc      \
    unrar v8 vegeta vramsteg watch wdiff webp wget wxmac x264 xvid xz yajl     \
    yaml-cpp youtube-dl zeromq zookeeper zsh"

HOMEBREW_CASKS="                                                               \
    1password atom atom-beta balsamiq-mockups battle-net caffeine clamxav      \
    cyberduck dbvisualizer disk-inventory-x docker dropbox evernote            \
    fantastical firefox flux google-chrome google-hangouts hipchat iexplorer   \
    istumbler iterm2 java kaleidoscope lingon-x lisanet-gimp mactex            \
    mysqlworkbench oclint silverlight skype slack snes9x sourcetree spectacle  \
    spotify steam sublime-text texstudio transmission vagrant virtualbox       \
    visual-studio-code vlc whatsapp xquartz"

ATOM_PACKAGES="                                                                \
    activate-power-mode aesthetic-ui atom-beautify atom-isort                  \
    atom-language-avro atom-notes auto-update-packages autocomplete-python     \
    base16-syntax busy-signal column-select cursor-indicator docblockr         \
    event-watch file-icons flatwhite-syntax force-tab format-shell git-blame   \
    highlight-selected indent-guide-improved intentions isotope-light-ui       \
    isotope-ui language-applescript language-atom-notes language-babel         \
    language-cmake language-diff language-docker language-groovy               \
    language-latex language-protobuf language-restructuredtext language-rust   \
    language-scala line-length-break linter linter-clang linter-coffeelint     \
    linter-csslint linter-docker linter-erb linter-eslint linter-flake8        \
    linter-jsonlint linter-rubocop linter-shellcheck linter-tidy               \
    linter-ui-default linter-write-good minimap minimap-find-and-replace       \
    minimap-git-diff minimap-highlight-selected minimap-selection              \
    multi-wrap-guide native-ui no-title-bar pretty-json python-yapf            \
    red-wavy-underline ruby-block set-syntax soft-wrap-indicator sort-lines    \
    standard-formatter tab-control tabs-to-spaces                              \
    tinacious-design-syntax-purple toggle-quotes trailing-spaces unity-ui"

CODE_PACKAGES="                                                                \
    DavidAnson.vscode-markdownlint HookyQR.beautify dbaeumer.vscode-eslint     \
    lukehoban.Go magicstack.MagicPython ms-python.python                       \
    robertohuertasm.vscode-icons spywhere.guides                               \
    streetsidesoftware.code-spell-checker"

PIP_PACKAGES="                                                                 \
    git-sweep3k glances httpie inflection patch pyobjc python-json-logger      \
    termcolor"

CONDA_PACKAGES="                                                               \
    appnope asn1crypto astroid attrs babel ca-certificates certifi cffi        \
    chardet conda conda-env coverage cryptography decorator hypothesis idna    \
    ipython ipython_genutils jedi lazy-object-proxy libcxx libcxxabi libedit   \
    libffi mccabe ncurses nose openssl parso pep8 pexpect pickleshare pip      \
    pluggy prompt_toolkit ptyprocess py pycodestyle pycosat pycparser pyflakes \
    pygments pylint pympler pyopenssl pysocks pytest python-dateutil           \
    python.app pytz pyyaml readline requests ruamel_yaml setuptools            \
    simplegeneric six sqlite tk traitlets urllib3 wcwidth wheel wrapt xz yaml  \
    zlib zope zope.interface"

GEM_PACKAGES="                                                                 \
    CFPropertyList actionmailer actionpack actionview activejob activesupport  \
    addressable ast bigdecimal blankslate builder bundler-unload claide        \
    cocoapods cocoapods-core cocoapods-deintegrate cocoapods-downloader        \
    cocoapods-plugins cocoapods-search cocoapods-stats cocoapods-trunk         \
    cocoapods-try coffee-script coffee-script-source colorator colored         \
    colored2 commander concurrent-ruby crass did_you_mean em-websocket erubis  \
    escape eventmachine execjs executable-hooks ffi forwardable-extended       \
    fourflusher fuzzy_match gem-wrappers gh_inspector globalid highline        \
    http_parser.rb i18n io-console jekyll jekyll-sass-converter jekyll-watch   \
    json kramdown liquid listen lolcat loofah mail mercenary mime-types        \
    mime-types-data mini_mime mini_portile2 minitest molinillo nanaimo nap     \
    net-telnet netrc nokogiri openssl paint parallel parser parslet pathutil   \
    pkg-config power_assert powerpack psych public_suffix puppet-lint rack     \
    rack-test rails-deprecated_sanitizer rails-dom-testing                     \
    rails-html-sanitizer rainbow rake rb-fsevent rb-inotify rdoc rmagick rouge \
    rubocop ruby-macho ruby-progressbar ruby_dep rubygems-bundler              \
    rubygems-update rvm safe_yaml sass sass-listen screengif test-unit         \
    thread_safe toml trollop tzinfo unicode-display_width xcodeproj xmlrpc"

NODE_MODULES="                                                                 \
    JSON all-contributors-cli bower coffee-script coffeelint cson decaffeinate \
    dockerlint eslint external-ip geoip-lite js-beautify json-stable-stringify \
    moment nesh raml2html standard tmpin"

GO_PACKAGES="                                                                  \
    github.com/acroca/go-symbols github.com/alecthomas/gometalinter            \
    github.com/cweill/gotests/gotests github.com/derekparker/delve/cmd/dlv     \
    github.com/derekparker/delve/pkg/proc/test                                 \
    github.com/derekparker/delve/service/test                                  \
    github.com/derekparker/delve/service/test/cmd                              \
    github.com/fatih/gomodifytags github.com/gotestyourself/gotestyourself     \
    github.com/gotestyourself/gotestyourself/env                               \
    github.com/gotestyourself/gotestyourself/golden                            \
    github.com/gotestyourself/gotestyourself/icmd                              \
    github.com/gotestyourself/gotestyourself/poll                              \
    github.com/gotestyourself/gotestyourself/skip                              \
    github.com/gotestyourself/gotestyourself/testsum/cmd                       \
    github.com/josharian/impl github.com/nsf/gocode                            \
    github.com/ramya-rao-a/go-outline github.com/rogpeppe/godef                \
    github.com/sqs/goreturns github.com/stretchr/testify                       \
    github.com/stretchr/testify/suite github.com/tpng/gopkgs                   \
    github.com/zmb3/gogetdoc golang.org/x/crypto/acme/autocert                 \
    golang.org/x/crypto/bcrypt golang.org/x/crypto/blake2b                     \
    golang.org/x/crypto/blake2s golang.org/x/crypto/bn256                      \
    golang.org/x/crypto/chacha20poly1305 golang.org/x/crypto/cryptobyte        \
    golang.org/x/crypto/hkdf golang.org/x/crypto/md4                           \
    golang.org/x/crypto/nacl/auth golang.org/x/crypto/nacl/box                 \
    golang.org/x/crypto/ocsp golang.org/x/crypto/openpgp                       \
    golang.org/x/crypto/openpgp/clearsign golang.org/x/crypto/otr              \
    golang.org/x/crypto/pkcs12 golang.org/x/crypto/ripemd160                   \
    golang.org/x/crypto/salsa20 golang.org/x/crypto/scrypt                     \
    golang.org/x/crypto/sha3 golang.org/x/crypto/ssh/agent                     \
    golang.org/x/crypto/ssh/knownhosts golang.org/x/crypto/ssh/test            \
    golang.org/x/crypto/tea golang.org/x/crypto/twofish                        \
    golang.org/x/crypto/xtea golang.org/x/crypto/xts                           \
    golang.org/x/net/context/ctxhttp golang.org/x/net/dict                     \
    golang.org/x/net/dns/dnsmessage golang.org/x/net/html/charset              \
    golang.org/x/net/http2/h2i golang.org/x/net/icmp                           \
    golang.org/x/net/internal/nettest golang.org/x/net/nettest                 \
    golang.org/x/net/netutil golang.org/x/net/proxy                            \
    golang.org/x/net/publicsuffix golang.org/x/net/route                       \
    golang.org/x/net/trace golang.org/x/net/webdav golang.org/x/net/xsrftoken  \
    golang.org/x/sys/plan9 golang.org/x/sys/windows                            \
    golang.org/x/sys/windows/registry golang.org/x/text                        \
    golang.org/x/text/cmd/gotext golang.org/x/text/collate/build               \
    golang.org/x/text/collate/tools/colcmp golang.org/x/text/currency          \
    golang.org/x/text/encoding/ianaindex                                       \
    golang.org/x/text/encoding/internal/enctest                                \
    golang.org/x/text/encoding/unicode/utf32                                   \
    golang.org/x/text/internal/export/idna golang.org/x/text/internal/testtext \
    golang.org/x/text/internal/triegen golang.org/x/text/internal/ucd          \
    golang.org/x/text/language/display golang.org/x/text/message               \
    golang.org/x/text/number golang.org/x/text/search golang.org/x/text/secure \
    golang.org/x/text/secure/precis golang.org/x/text/unicode                  \
    golang.org/x/text/unicode/rangetable golang.org/x/text/unicode/runenames   \
    golang.org/x/tools/cmd/benchcmp golang.org/x/tools/cmd/bundle              \
    golang.org/x/tools/cmd/callgraph golang.org/x/tools/cmd/compilebench       \
    golang.org/x/tools/cmd/cover golang.org/x/tools/cmd/digraph                \
    golang.org/x/tools/cmd/eg golang.org/x/tools/cmd/fiximports                \
    golang.org/x/tools/cmd/getgo golang.org/x/tools/cmd/getgo/server           \
    golang.org/x/tools/cmd/go-contrib-init golang.org/x/tools/cmd/godex        \
    golang.org/x/tools/cmd/godoc golang.org/x/tools/cmd/goimports              \
    golang.org/x/tools/cmd/gomvpkg golang.org/x/tools/cmd/gorename             \
    golang.org/x/tools/cmd/gotype golang.org/x/tools/cmd/goyacc                \
    golang.org/x/tools/cmd/guru golang.org/x/tools/cmd/heapview                \
    golang.org/x/tools/cmd/heapview/internal/core                              \
    golang.org/x/tools/cmd/html2article golang.org/x/tools/cmd/present         \
    golang.org/x/tools/cmd/ssadump golang.org/x/tools/cmd/stress               \
    golang.org/x/tools/cmd/stringer golang.org/x/tools/cmd/tip                 \
    golang.org/x/tools/cmd/toolstash golang.org/x/tools/go/gccgoexportdata     \
    golang.org/x/tools/go/gcexportdata golang.org/x/tools/go/vcs               \
    mvdan.cc/sh/cmd/gosh mvdan.cc/sh/cmd/shfmt"

CARGO_PACKAGES="                                                               \
    cargo-update loc"
# END GENERATED PACKAGE LISTS

ITEM_LISTS=(HOMEBREW_FORMULAS HOMEBREW_CASKS ATOM_PACKAGES CODE_PACKAGES
    PIP_PACKAGES CONDA_PACKAGES GEM_PACKAGES NODE_MODULES GO_PACKAGES
    CARGO_PACKAGES)

################################################################################
# Script Utilities
################################################################################
cleanup_item_list() {
    # A useful function for cleaning up the above item lists.
    # This is an implementation detail, and is used by update scripts.
    # Usage: setup -i (aka --items)
    local items_var lines leftover
    declare -a lines
    items_var="$1"
    lines=("$items_var=\"")
    eval "echo \$$items_var" |
        sed "s/  */ /g;s/^ *//g;" |
        tr ' ' '\n' |
        sort -u |
        tr '\n' ' ' |
        fold -w 75 -s |
        sed 's/^/    /g;s/ $//g' |
        {
            while IFS='' read -r line; do lines+=("$line"); done
            for ((n = 0; n < ${#lines[@]}; n++)); do
                line="${lines[$n]}"
                leftover="$((80 - ${#line} - 1))"
                echo -n "$line"
                if [[ $((n + 1)) != "${#lines[@]}" ]]; then
                    for ((i = 1; i <= leftover; i++)); do
                        echo -n ' '
                    done
                    echo "\\"
                else
                    echo "\""
                fi
            done
        }
    echo
}

show_items() {
    # Pretty prints an item list suitable for usage help.
    local list_name="$1"
    local list_title
    list_title="$(echo "$list_name" |
        tr '[:upper:]' '[:lower:]' |
        tr '_' ' ' |
        awk '{for (i=1;i <= NF;i++) {
            sub(".",substr(toupper($i),1,1),$i)} print}')"
    local output="$list_title:"
    output="$output $(eval "echo \$$list_name" | sed "s/^ *//g;s/  */, /g")"
    echo "$output" | fold -w 80 -s
    echo
}

usage() {
    (
        echo "usage: ${0##*/} [-l|-d|-f|-h|--help] [all|step-name(s)]"
        echo "Automatically installs and configures a complete *nix developer environment."
        echo
        echo "options:"
        (
            echo "    -h, --help: show usage help"
            echo "    -l: list available step names"
            echo "    -d: dry-run"
            echo "    -f: force install, do not ask for any confirmation"
            echo "    all: executes all steps"
            echo "    step-name(s): execute the given step(s)"
        ) | column -ts:
        echo
        echo "steps:"
        "$0" -l | sed 's/^/    /g'
        echo
        IFS=' '
        for I in "${ITEM_LISTS[@]}"; do
            show_items "$I"
        done
    ) >&2
    exit 1
}

# shellcheck source=../.shell_control
source "$HOME/.shell_control" || echo "$(tput bold)error: ~/.shell_control not installed!$(tput sgr0)" >&2

################################################################################
# Step Utilities
################################################################################
ensure_no_anaconda() {
    # Anaconda is known to frequently break Homebrew builds, including Vim and
    # MacVim, due to bundling many duplicates of system and Homebrew-available
    # tools. Make sure to exit it before doing anything with Homebrew.
    # It can also cause build issues for Atom packages with native modules.

    if [[ -n "$CONDA_DEFAULT_ENV" ]]; then
        if which deactivate >/dev/null 2>&1; then
            run "source deactivate"
        fi
    fi

    if [[ -n "$ANACONDA_ROOT" ]]; then
        PATH="$(echo "$PATH" | sed "s@$ANACONDA_ROOT/bin@@g;s@::@:@g;s@^:@@;s@:\$@@;")"
        MANPATH="$(echo "$PATH" | sed "s@$ANACONDA_ROOT/share/man@@g;s@::@:@g;s@^:@@;s@:\$@@;")"
        export PATH
        export MANPATH
    fi
    unset PYTHON_ENV
}

# Usage: in_array "$element" "${array[@]}"
in_array() {
    local e match="$1"
    shift
    for e; do [[ "$e" == "$match" ]] && return 0; done
    return 1
}

################################################################################
# Step osx -- a.k.a macOS
################################################################################
step_osx() {
    # Much of this step has been crafted from https://mths.be/osx

    ########################################
    # General UI/UX
    ########################################
    osascript -e 'tell application "System Preferences" to quit'

    HOST="$(uname -n)"
    query "Set hostname [$HOST]" "$HOST"
    if [[ -n "$REPLY" ]]; then
        run "sudo scutil --set HostName '$REPLY'"
    fi

    show "Set standby delay to 24 hours (default is 1 hour)"
    run "sudo pmset -a standbydelay 86400"

    show "Disable the sound effects on boot"
    run "sudo nvram SystemAudioVolume=' '"

    # show "Disable transparency in the menu bar and elsewhere on Yosemite"
    # run "defaults write com.apple.universalaccess reduceTransparency -bool true"

    # show "Set highlight color to green"
    # run "defaults write NSGlobalDomain AppleHighlightColor -string '0.764700 0.976500 0.568600'"

    show "Set sidebar icon size to medium"
    run "defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2"

    # Possible values: `WhenScrolling`, `Automatic` and `Always`
    # show "Always show scrollbars"
    # run "defaults write NSGlobalDomain AppleShowScrollBars -string 'Always'"

    # show "Disable the over-the-top focus ring animation"
    # run "defaults write NSGlobalDomain NSUseAnimatedFocusRing -bool false"

    # (Uncomment if you’re on an older Mac that messes up the animation)
    # show "Disable smooth scrolling"
    # run "defaults write NSGlobalDomain NSScrollAnimationEnabled -bool false"

    show "Increase window resize speed for Cocoa applications"
    run "defaults write NSGlobalDomain NSWindowResizeTime -float 0.001"

    show "Expand save panel by default"
    run "defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true"
    run "defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true"

    show "Expand print panel by default"
    run "defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true"
    run "defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true"

    show "Save to disk (not to iCloud) by default"
    run "defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false"

    show "Automatically quit printer app once the print jobs complete"
    run "defaults write com.apple.print.PrintingPrefs 'Quit When Finished' -bool true"

    show "Disable the 'Are you sure you want to open this application?' dialog"
    run "defaults write com.apple.LaunchServices LSQuarantine -bool false"

    show "Remove duplicates in the 'Open With' menu (also see \`lscleanup\` alias)"
    run "/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user"

    # Try e.g. `cd /tmp; unidecode "\x{0000}" > cc.txt; open -e cc.txt`
    show "Display ASCII control characters using caret notation in standard text views"
    run "defaults write NSGlobalDomain NSTextShowsControlCharacters -bool true"

    show "Disable Resume system-wide"
    run "defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false"

    show "Disable automatic termination of inactive apps"
    run "defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true"

    # show "Disable the crash reporter"
    # run "defaults write com.apple.CrashReporter DialogType -string 'none'"

    show "Set Help Viewer windows to non-floating mode"
    run "defaults write com.apple.helpviewer DevMode -bool true"

    # Commented out, as this is known to cause problems in various Adobe apps :(
    # See https://github.com/mathiasbynens/dotfiles/issues/237
    # show "Fix for the ancient UTF-8 bug in QuickLook" # See: https://mths.be/bbo
    # run "echo '0x08000100:0' > '$HOME/.CFUserTextEncoding'"

    show "Reveal IP address, hostname, OS version, etc. when clicking the clock in the login window"
    run "sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName"

    show "Restart automatically if the computer freezes"
    run "sudo systemsetup -setrestartfreeze on"

    show "Never go into computer sleep mode"
    run "sudo systemsetup -setcomputersleep Off >/dev/null"

    # show "Disable Notification Center and remove the menu bar icon"
    # run "launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2>/dev/null"

    show "Disable automatic capitalization as it’s annoying when typing code"
    run "defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false"

    show "Disable smart dashes as they’re annoying when typing code"
    run "defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false"

    show "Disable automatic period substitution as it’s annoying when typing code"
    run "defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false"

    show "Disable smart quotes as they’re annoying when typing code"
    run "defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false"

    show "Disable auto-correct"
    run "defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false"

    if [[ -e "$HOME/env/Rio.jpg" ]]; then
        show "Set wallpaper to $HOME/env/Rio.jpg"

        run "sudo cp -uvf '$HOME/env/Rio.jpg' /System/Library/CoreServices/DefaultDesktop.jpg"
        run "sudo chown root:wheel '$HOME/env/Rio.jpg'"

        run "sudo mkdir -p /Users/Shared/Background"
        run "sudo cp -uvf '$HOME/env/Rio.jpg' /Users/Shared/Background/custombg.jpeg"
        run "sudo chown -R root:wheel /Users/Shared/Background"

        MINOR_MACOS_VERSION="$(sw_vers | grep ProductVersion: | cut -f2 | cut -f2 -d.)"
        if [[ "$MINOR_MACOS_VERSION" -ge 9 ]]; then
            run "sqlite3 '$HOME/Library/Application Support/Dock/desktoppicture.db' 'delete from data;'"
            run "sqlite3 '$HOME/Library/Application Support/Dock/desktoppicture.db' 'insert into data values (\"$HOME/env/Rio.jpg\");'"
        else
            run "defaults write com.apple.desktop Background '{default = {ImageFilePath = \"/Users/Shared/Background/custombg.jpeg\"; };}'"
        fi

        if type set_wallpaper >/dev/null 2>&1; then
            run "set_wallpaper --path '$HOME/env/Rio.jpg'"
        fi
    fi

    ########################################
    # SSD-specific tweaks
    ########################################
    show "Disable hibernation (speeds up entering sleep mode)"
    run "sudo pmset -a hibernatemode 0"

    show "Remove the sleep image file to save disk space"
    run "sudo rm /private/var/vm/sleepimage"
    show "Create a zero-byte file instead…"
    run "sudo touch /private/var/vm/sleepimage"
    show "…and make sure it can’t be rewritten"
    run "sudo chflags uchg /private/var/vm/sleepimage"

    ########################################
    # Trackpad, mouse, keyboard, Bluetooth accessories, and input
    ########################################
    show "Trackpad: enable tap to click for this user and for the login screen"
    run "defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true"
    run "defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1"
    run "defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1"

    # show "Trackpad: map bottom right corner to right-click"
    # run "defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2"
    # run "defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true"
    # run "defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1"
    # run "defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true"

    show 'Disable “natural” (Lion-style) scrolling'
    run "defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false"

    show "Increase sound quality for Bluetooth headphones/headsets"
    run "defaults write com.apple.BluetoothAudioAgent 'Apple Bitpool Min (editable)' -int 40"

    show "Enable full keyboard access for all controls" # (e.g. enable Tab in modal dialogs)
    run "defaults write NSGlobalDomain AppleKeyboardUIMode -int 3"

    show "Use scroll gesture with the Ctrl (^) modifier key to zoom"
    run "defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true"
    run "defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144"

    show "Follow the keyboard focus while zoomed in"
    run "defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true"

    show "Disable press-and-hold for keys in favor of key repeat"
    run "defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false"

    show "Set a blazingly fast keyboard repeat rate"
    run "defaults write NSGlobalDomain KeyRepeat -int 1"
    run "defaults write NSGlobalDomain InitialKeyRepeat -int 10"

    show "Set language and text formats"
    run "defaults write NSGlobalDomain AppleLanguages -array 'en' 'nl'"
    run "defaults write NSGlobalDomain AppleLocale -string 'en_US@currency=USD'"
    run "defaults write NSGlobalDomain AppleMeasurementUnits -string 'Inches'"
    run "defaults write NSGlobalDomain AppleMetricUnits -bool false"

    show "Show language menu in the top right corner of the boot screen"
    run "sudo defaults write /Library/Preferences/com.apple.loginwindow showInputMenu -bool true"

    # See `sudo systemsetup -listtimezones` for other values
    show "Set the timezone to America/Chicago"
    run "sudo systemsetup -settimezone 'America/Chicago' >/dev/null"

    show "Stop iTunes from responding to the keyboard media keys"
    run "launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist 2>/dev/null"

    ########################################
    # Screen
    ########################################
    show "Require password immediately after sleep or screen saver begins"
    run "defaults write com.apple.screensaver askForPassword -int 1"
    run "defaults write com.apple.screensaver askForPasswordDelay -int 0"

    show "Save screenshots to the desktop"
    run "defaults write com.apple.screencapture location -string '${HOME}/Desktop'"

    show "Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)"
    run "defaults write com.apple.screencapture type -string 'png'"

    show "Disable shadow in screenshots"
    run "defaults write com.apple.screencapture disable-shadow -bool true"

    # Reference: https://github.com/kevinSuttle/macOS-Defaults/issues/17#issuecomment-266633501
    show "Enable subpixel font rendering on non-Apple LCDs"
    run "defaults write NSGlobalDomain AppleFontSmoothing -int 1"

    show "Enable HiDPI display modes (requires restart)"
    run "sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true"

    ########################################
    # Finder
    ########################################
    show "Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons"
    run "defaults write com.apple.finder QuitMenuItem -bool true"

    show "Finder: disable window animations and Get Info animations"
    run "defaults write com.apple.finder DisableAllAnimations -bool true"

    # For other paths, use `PfLo` and `file:///full/path/here/`
    show "Set Desktop as the default location for new Finder windows"
    run "defaults write com.apple.finder NewWindowTarget -string 'PfDe'"
    run "defaults write com.apple.finder NewWindowTargetPath -string 'file://${HOME}/Desktop/'"

    show "Show icons for hard drives, servers, and removable media on the desktop"
    run "defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true"
    run "defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true"
    run "defaults write com.apple.finder ShowMountedServersOnDesktop -bool true"
    run "defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true"

    # show "Finder: show hidden files by default"
    # run "defaults write com.apple.finder AppleShowAllFiles -bool true"

    show "Finder: show all filename extensions"
    run "defaults write NSGlobalDomain AppleShowAllExtensions -bool true"

    show "Finder: show status bar"
    run "defaults write com.apple.finder ShowStatusBar -bool true"

    show "Finder: show path bar"
    run "defaults write com.apple.finder ShowPathbar -bool true"

    show "Display full POSIX path as Finder window title"
    run "defaults write com.apple.finder _FXShowPosixPathInTitle -bool true"

    show "Keep folders on top when sorting by name"
    run "defaults write com.apple.finder _FXSortFoldersFirst -bool true"

    show "When performing a search, search the current folder by default"
    run "defaults write com.apple.finder FXDefaultSearchScope -string 'SCcf'"

    show "Disable the warning when changing a file extension"
    run "defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false"

    show "Enable spring loading for directories"
    run "defaults write NSGlobalDomain com.apple.springing.enabled -bool true"

    show "Remove the spring loading delay for directories"
    run "defaults write NSGlobalDomain com.apple.springing.delay -float 0"

    show "Avoid creating .DS_Store files on network or USB volumes"
    run "defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true"
    run "defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true"

    show "Disable disk image verification"
    run "defaults write com.apple.frameworks.diskimages skip-verify -bool true"
    run "defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true"
    run "defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true"

    show "Automatically open a new Finder window when a volume is mounted"
    run "defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true"
    run "defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true"
    run "defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true"

    show "Show item info near icons on the desktop and in other icon views"
    run "/usr/libexec/PlistBuddy -c 'Set :DesktopViewSettings:IconViewSettings:showItemInfo true' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :FK_StandardViewSettings:IconViewSettings:showItemInfo true' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :StandardViewSettings:IconViewSettings:showItemInfo true' '$HOME/Library/Preferences/com.apple.finder.plist'"

    show "Show item info to the right of the icons on the desktop"
    run "/usr/libexec/PlistBuddy -c 'Set DesktopViewSettings:IconViewSettings:labelOnBottom false' '$HOME/Library/Preferences/com.apple.finder.plist'"

    show "Enable sort by Date Modified for icons on the desktop and in other icon views"
    run "/usr/libexec/PlistBuddy -c 'Set :DesktopViewSettings:IconViewSettings:arrangeBy dateModified' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :FK_StandardViewSettings:IconViewSettings:arrangeBy dateModified' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :StandardViewSettings:IconViewSettings:arrangeBy dateModified' '$HOME/Library/Preferences/com.apple.finder.plist'"

    show "Increase grid spacing for icons on the desktop and in other icon views"
    run "/usr/libexec/PlistBuddy -c 'Set :DesktopViewSettings:IconViewSettings:gridSpacing 100' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :FK_StandardViewSettings:IconViewSettings:gridSpacing 100' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :StandardViewSettings:IconViewSettings:gridSpacing 100' '$HOME/Library/Preferences/com.apple.finder.plist'"

    show "Increase the size of icons on the desktop and in other icon views"
    run "/usr/libexec/PlistBuddy -c 'Set :DesktopViewSettings:IconViewSettings:iconSize 80' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :FK_StandardViewSettings:IconViewSettings:iconSize 80' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :StandardViewSettings:IconViewSettings:iconSize 80' '$HOME/Library/Preferences/com.apple.finder.plist'"

    # Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
    show "Use list view in all Finder windows by default"
    run "defaults write com.apple.finder FXPreferredViewStyle -string 'Nlsv'"

    show "Disable the warning before emptying the Trash"
    run "defaults write com.apple.finder WarnOnEmptyTrash -bool false"

    show "Enable AirDrop over Ethernet and on unsupported Macs running Lion"
    run "defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true"

    show "Show the ~/Library folder"
    run "chflags nohidden '$HOME/Library'"

    show "Show the /Volumes folder"
    run "sudo chflags nohidden /Volumes"

    # show "Remove Dropbox’s green checkmark icons in Finder"
    # run "test -e /Applications/Dropbox.app/Contents/Resources/emblem-dropbox-uptodate.icns && mv -f '$_' '$_.bak'"

    show 'Expand the following File Info panes: “General”, “Open with”, and “Sharing & Permissions”'
    run "defaults write com.apple.finder FXInfoPanesExpanded -dict General -bool true OpenWith -bool true Privileges -bool true"

    ########################################
    # Dock, Dashboard, and hot corners
    ########################################
    show "Enable highlight hover effect for the grid view of a stack (Dock)"
    run "defaults write com.apple.dock mouse-over-hilite-stack -bool true"

    show "Set the icon size of Dock items to 36 pixels"
    run "defaults write com.apple.dock tilesize -int 36"

    show "Change minimize/maximize window effect"
    run "defaults write com.apple.dock mineffect -string 'scale'"

    show "Minimize windows into their application’s icon"
    run "defaults write com.apple.dock minimize-to-application -bool true"

    show "Enable spring loading for all Dock items"
    run "defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true"

    show "Show indicator lights for open applications in the Dock"
    run "defaults write com.apple.dock show-process-indicators -bool true"

    # This is only really useful when setting up a new Mac, or if you don’t use the Dock to launch apps.
    # show "Wipe all (default) app icons from the Dock"
    # run "defaults write com.apple.dock persistent-apps -array"

    # show "Show only open applications in the Dock"
    # run "defaults write com.apple.dock static-only -bool true"

    show "Don’t animate opening applications from the Dock"
    run "defaults write com.apple.dock launchanim -bool false"

    show "Speed up Mission Control animations"
    defaults write com.apple.dock expose-animation-duration -float 0.1

    show "Don’t group windows by application in Mission Control" # (i.e. use the old Exposé behavior instead)
    defaults write com.apple.dock expose-group-by-app -bool false

    show "Disable Dashboard"
    run "defaults write com.apple.dashboard mcx-disabled -bool true"

    show "Don’t show Dashboard as a Space"
    run "defaults write com.apple.dock dashboard-in-overlay -bool true"

    show "Don’t automatically rearrange Spaces based on most recent use"
    run "defaults write com.apple.dock mru-spaces -bool false"

    show "Remove the auto-hiding Dock delay"
    run "defaults write com.apple.dock autohide-delay -float 0"

    show "Remove the animation when hiding/showing the Dock"
    run "defaults write com.apple.dock autohide-time-modifier -float 0"

    show "Disable automatically hide and show the Dock"
    run "defaults write com.apple.dock autohide -bool false"

    show "Make Dock icons of hidden applications translucent"
    run "defaults write com.apple.dock showhidden -bool true"

    # show "Disable the Launchpad gesture (pinch with thumb and three fingers)"
    # run "defaults write com.apple.dock showLaunchpadGestureEnabled -int 0"

    show "Reset Launchpad, but keep the desktop wallpaper intact"
    run "find '${HOME}/Library/Application Support/Dock' -name '*-*.db' -maxdepth 1 -delete"

    show "Add iOS & Watch Simulator to Launchpad"
    run "sudo ln -sf '/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app' '/Applications/Simulator.app'"
    run "sudo ln -sf '/Applications/Xcode.app/Contents/Developer/Applications/Simulator (Watch).app' '/Applications/Simulator (Watch).app'"

    # show "Add a spacer to the left side of the Dock (where the applications are)"
    # run "defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type=\"spacer-tile\";}'"
    # show "Add a spacer to the right side of the Dock (where the Trash is)"
    # run "defaults write com.apple.dock persistent-others -array-add '{tile-data={}; tile-type=\"spacer-tile\";}'"

    # Hot corners
    # Possible values:
    #      0: no-op
    #      2: Mission Control
    #      3: Show application windows
    #      4: Desktop
    #      5: Start screen saver
    #      6: Disable screen saver
    #      7: Dashboard
    #     10: Put display to sleep
    #     11: Launchpad
    #     12: Notification Center
    show "Top left screen corner -> Mission Control"
    run "defaults write com.apple.dock wvous-tl-corner -int 2"
    run "defaults write com.apple.dock wvous-tl-modifier -int 0"
    show "Top right screen corner -> Start screen saver"
    run "defaults write com.apple.dock wvous-tr-corner -int 5"
    run "defaults write com.apple.dock wvous-tr-modifier -int 0"
    show "Bottom right screen corner -> Desktop"
    run "defaults write com.apple.dock wvous-br-corner -int 4"
    run "defaults write com.apple.dock wvous-br-modifier -int 0"
    show "Bottom left screen corner -> Show application windows"
    run "defaults write com.apple.dock wvous-bl-corner -int 3"
    run "defaults write com.apple.dock wvous-bl-modifier -int 0"

    show "Disable Ctrl+Up Mission Control shortcut"
    run "defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 32 \"{enabled = 0; value = { parameters = (65535, 126, 8650752); type = 'standard'; }; }\""
    run "defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 34 \"{enabled = 0; value = { parameters = (65535, 126, 8781824); type = 'standard'; }; }\""

    show "Disable Ctrl+Down Mission Control shortcut"
    run "defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 33 \"{enabled = 0; value = { parameters = (65535, 125, 8650752); type = 'standard'; }; }\""
    run "defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 35 \"{enabled = 0; value = { parameters = (65535, 125, 8781824); type = 'standard'; }; }\""

    ########################################
    # Safari & WebKit
    ########################################
    show "Privacy: don’t send search queries to Apple"
    run "defaults write com.apple.Safari UniversalSearchEnabled -bool false"
    run "defaults write com.apple.Safari SuppressSearchSuggestions -bool true"

    show "Press Tab to highlight each item on a web page"
    run "defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true"
    run "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true"

    show "Show the full URL in the address bar (note: this still hides the scheme)"
    run "defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true"

    show "Set Safari’s home page to 'about:blank' for faster loading"
    run "defaults write com.apple.Safari HomePage -string 'about:blank'"

    show "Prevent Safari from opening ‘safe’ files automatically after downloading"
    run "defaults write com.apple.Safari AutoOpenSafeDownloads -bool false"

    show "Allow hitting the Backspace key to go to the previous page in history"
    run "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true"

    show "Hide Safari’s bookmarks bar by default"
    run "defaults write com.apple.Safari ShowFavoritesBar -bool false"

    show "Hide Safari’s sidebar in Top Sites"
    run "defaults write com.apple.Safari ShowSidebarInTopSites -bool false"

    show "Disable Safari’s thumbnail cache for History and Top Sites"
    run "defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2"

    show "Enable Safari’s debug menu"
    run "defaults write com.apple.Safari IncludeInternalDebugMenu -bool true"

    show "Make Safari’s search banners default to Contains instead of Starts With"
    run "defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false"

    show "Remove useless icons from Safari’s bookmarks bar"
    run "defaults write com.apple.Safari ProxiesInBookmarksBar '()'"

    show "Enable the Develop menu and the Web Inspector in Safari"
    run "defaults write com.apple.Safari IncludeDevelopMenu -bool true"
    run "defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true"
    run "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true"

    show "Add a context menu item for showing the Web Inspector in web views"
    run "defaults write NSGlobalDomain WebKitDeveloperExtras -bool true"

    show "Enable continuous spellchecking"
    run "defaults write com.apple.Safari WebContinuousSpellCheckingEnabled -bool true"
    show "Disable auto-correct"
    run "defaults write com.apple.Safari WebAutomaticSpellingCorrectionEnabled -bool false"

    show "Disable AutoFill"
    run "defaults write com.apple.Safari AutoFillFromAddressBook -bool false"
    run "defaults write com.apple.Safari AutoFillPasswords -bool false"
    run "defaults write com.apple.Safari AutoFillCreditCardData -bool false"
    run "defaults write com.apple.Safari AutoFillMiscellaneousForms -bool false"

    show "Warn about fraudulent websites"
    run "defaults write com.apple.Safari WarnAboutFraudulentWebsites -bool true"

    show "Disable plug-ins"
    run "defaults write com.apple.Safari WebKitPluginsEnabled -bool false"
    run "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool false"

    show "Disable Java"
    run "defaults write com.apple.Safari WebKitJavaEnabled -bool false"
    run "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool false"

    show "Block pop-up windows"
    run "defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool false"
    run "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false"

    show "Disable auto-playing video"
    run "defaults write com.apple.Safari WebKitMediaPlaybackAllowsInline -bool false"
    run "defaults write com.apple.SafariTechnologyPreview WebKitMediaPlaybackAllowsInline -bool false"
    run "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool false"
    run "defaults write com.apple.SafariTechnologyPreview com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool false"

    show 'Enable “Do Not Track”'
    run "defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true"

    show "Update extensions automatically"
    run "defaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool true"

    ########################################
    # Mail
    ########################################
    show "Disable send and reply animations in Mail.app"
    run "defaults write com.apple.mail DisableReplyAnimations -bool true"
    run "defaults write com.apple.mail DisableSendAnimations -bool true"

    show "Copy email addresses as \`foo@example.com\` instead of \`Foo Bar <foo@example.com>\` in Mail.app"
    run "defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false"

    show "Add the keyboard shortcut ⌘ + Enter to send an email in Mail.app"
    run "defaults write com.apple.mail NSUserKeyEquivalents -dict-add 'Send' '@\U21a9'"

    show "Display emails in threaded mode, sorted by date (oldest at the top)"
    run "defaults write com.apple.mail DraftsViewerAttributes -dict-add 'DisplayInThreadedMode' -string 'yes'"
    run "defaults write com.apple.mail DraftsViewerAttributes -dict-add 'SortedDescending' -string 'yes'"
    run "defaults write com.apple.mail DraftsViewerAttributes -dict-add 'SortOrder' -string 'received-date'"

    show "Disable inline attachments (just show the icons)"
    run "defaults write com.apple.mail DisableInlineAttachmentViewing -bool true"

    show "Disable automatic spell checking"
    run "defaults write com.apple.mail SpellCheckingBehavior -string 'NoSpellCheckingEnabled'"

    ########################################
    # Spotlight
    ########################################
    # show "Hide Spotlight tray-icon (and subsequent helper)"
    # run "sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search"

    # Use `sudo mdutil -i off "/Volumes/foo"` to stop indexing any volume.
    show "Disable Spotlight indexing for any volume that gets mounted and has not yet been indexed before."
    run "sudo defaults write /.Spotlight-V100/VolumeConfiguration Exclusions -array '/Volumes'"

    # Yosemite-specific search results (remove them if you are using macOS 10.9 or older):
    #   MENU_DEFINITION
    #   MENU_CONVERSION
    #   MENU_EXPRESSION
    #   MENU_SPOTLIGHT_SUGGESTIONS (send search queries to Apple)
    #   MENU_WEBSEARCH             (send search queries to Apple)
    #   MENU_OTHER
    show "Change indexing order and disable some search results..."
    defaults write com.apple.spotlight orderedItems -array \
        '{"enabled" = 1;"name" = "APPLICATIONS";}' \
        '{"enabled" = 1;"name" = "SYSTEM_PREFS";}' \
        '{"enabled" = 1;"name" = "DIRECTORIES";}' \
        '{"enabled" = 1;"name" = "PDF";}' \
        '{"enabled" = 1;"name" = "FONTS";}' \
        '{"enabled" = 0;"name" = "DOCUMENTS";}' \
        '{"enabled" = 0;"name" = "MESSAGES";}' \
        '{"enabled" = 0;"name" = "CONTACT";}' \
        '{"enabled" = 0;"name" = "EVENT_TODO";}' \
        '{"enabled" = 0;"name" = "IMAGES";}' \
        '{"enabled" = 0;"name" = "BOOKMARKS";}' \
        '{"enabled" = 0;"name" = "MUSIC";}' \
        '{"enabled" = 0;"name" = "MOVIES";}' \
        '{"enabled" = 0;"name" = "PRESENTATIONS";}' \
        '{"enabled" = 0;"name" = "SPREADSHEETS";}' \
        '{"enabled" = 0;"name" = "SOURCE";}' \
        '{"enabled" = 0;"name" = "MENU_DEFINITION";}' \
        '{"enabled" = 0;"name" = "MENU_OTHER";}' \
        '{"enabled" = 0;"name" = "MENU_CONVERSION";}' \
        '{"enabled" = 0;"name" = "MENU_EXPRESSION";}' \
        '{"enabled" = 0;"name" = "MENU_WEBSEARCH";}' \
        '{"enabled" = 0;"name" = "MENU_SPOTLIGHT_SUGGESTIONS";}'
    show "Load new settings before rebuilding the index"
    show "Make sure indexing is enabled for the main volume"
    run "sudo mdutil -i on / >/dev/null"
    show "Rebuild the index from scratch"
    run "sudo mdutil -E / >/dev/null"

    ########################################
    # Terminal & iTerm 2
    ########################################
    show "Only use UTF-8 in Terminal.app"
    run "defaults write com.apple.terminal StringEncodings -array 4"

    show "Use a modified version of the Solarized Light theme by default in Terminal.app..."
    osascript <<EOF
    tell application "Terminal"

        local allOpenedWindows
        local initialOpenedWindows
        local windowID
        set themeName to "Solarized Light xterm-256color"

        (* Store the IDs of all the open terminal windows. *)
        set initialOpenedWindows to id of every window

        (* Open the custom theme so that it gets added to the list
        of available terminal themes (note: this will open two
        additional terminal windows). *)
        do shell script "open '$HOME/env/" & themeName & ".terminal'"

        (* Wait a little bit to ensure that the custom theme is added. *)
        delay 1

        (* Set the custom theme as the default terminal theme. *)
        set default settings to settings set themeName

        (* Get the IDs of all the currently opened terminal windows. *)
        set allOpenedWindows to id of every window

        repeat with windowID in allOpenedWindows

        (* Close the additional windows that were opened in order
        to add the custom theme to the list of terminal themes. *)
        if initialOpenedWindows does not contain windowID then
            close (every window whose id is windowID)

            (* Change the theme for the initial opened terminal windows
            to remove the need to close them in order for the custom
            theme to be applied. *)
        else
            set current settings of tabs of (every window whose id is windowID) to settings set themeName
            end if

            end repeat

    end tell
EOF

    # i.e. hover over a window and start typing in it without clicking first
    # show 'Enable “focus follows mouse” for Terminal.app and all X11 apps'
    # run "defaults write com.apple.terminal FocusFollowsMouse -bool true"
    # run "defaults write org.x.X11 wm_ffm -bool true"

    # See: https://security.stackexchange.com/a/47786/8918
    show "Enable Secure Keyboard Entry in Terminal.app"
    run "defaults write com.apple.terminal SecureKeyboardEntry -bool true"

    show "Disable the annoying line marks"
    run "defaults write com.apple.Terminal ShowLineMarks -int 0"

    show "Install the Solarized Light theme for iTerm"
    run "open '${HOME}/env/Solarized Light.itermcolors'"

    show "Don’t display the annoying prompt when quitting iTerm"
    run "defaults write com.googlecode.iterm2 PromptOnQuit -bool false"

    ########################################
    # Time Machine
    ########################################
    show "Prevent Time Machine from prompting to use new hard drives as backup volume"
    run "defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true"

    show "Disable local Time Machine backups"
    run "hash tmutil &> /dev/null && sudo tmutil disablelocal"

    ########################################
    # Activity Monitor
    ########################################
    show "Show the main window when launching Activity Monitor"
    run "defaults write com.apple.ActivityMonitor OpenMainWindow -bool true"

    show "Visualize CPU usage in the Activity Monitor Dock icon"
    run "defaults write com.apple.ActivityMonitor IconType -int 5"

    show "Show all processes in Activity Monitor"
    run "defaults write com.apple.ActivityMonitor ShowCategory -int 0"

    show "Sort Activity Monitor results by CPU usage"
    run "defaults write com.apple.ActivityMonitor SortColumn -string 'CPUUsage'"
    run "defaults write com.apple.ActivityMonitor SortDirection -int 0"

    ########################################
    # Address Book, Dashboard, iCal, TextEdit, and Disk Utility
    ########################################
    show "Enable the debug menu in Address Book"
    run "defaults write com.apple.addressbook ABShowDebugMenu -bool true"

    show "Enable Dashboard dev mode (allows keeping widgets on the desktop)"
    run "defaults write com.apple.dashboard devmode -bool true"

    show "Enable the debug menu in iCal (pre-10.8)"
    run "defaults write com.apple.iCal IncludeDebugMenu -bool true"

    show "Use plain text mode for new TextEdit documents"
    run "defaults write com.apple.TextEdit RichText -int 0"
    show "Open and save files as UTF-8 in TextEdit"
    run "defaults write com.apple.TextEdit PlainTextEncoding -int 4"
    run "defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4"

    show "Enable the debug menu in Disk Utility"
    run "defaults write com.apple.DiskUtility DUDebugMenuEnabled -bool true"
    run "defaults write com.apple.DiskUtility advanced-image-options -bool true"

    show "Auto-play videos when opened with QuickTime Player"
    run "defaults write com.apple.QuickTimePlayerX MGPlayMovieOnOpen -bool true"

    ########################################
    # Mac App Store
    ########################################
    show "Enable the WebKit Developer Tools in the Mac App Store"
    run "defaults write com.apple.appstore WebKitDeveloperExtras -bool true"

    show "Enable Debug Menu in the Mac App Store"
    run "defaults write com.apple.appstore ShowDebugMenu -bool true"

    show "Enable the automatic update check"
    run "defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true"

    show "Check for software updates daily, not just once per week"
    run "defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1"

    show "Download newly available updates in background"
    run "defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1"

    show "Install System data files & security updates"
    run "defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1"

    show "Automatically download apps purchased on other Macs"
    run "defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1"

    show "Turn on app auto-update"
    run "defaults write com.apple.commerce AutoUpdate -bool true"

    show "Allow the App Store to reboot machine on macOS updates"
    run "defaults write com.apple.commerce AutoUpdateRestartRequired -bool true"

    ########################################
    # Photos
    ########################################
    show "Prevent Photos from opening automatically when devices are plugged in"
    run "defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true"

    ########################################
    # Messages
    ########################################
    show "Disable automatic emoji substitution (i.e. use plain text smileys)"
    run "defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add 'automaticEmojiSubstitutionEnablediMessage' -bool false"

    show "Disable smart quotes as it’s annoying for messages that contain code"
    run "defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add 'automaticQuoteSubstitutionEnabled' -bool false"

    show "Disable continuous spell checking"
    run "defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add 'continuousSpellCheckingEnabled' -bool false"

    ########################################
    # Google Chrome & Google Chrome Canary
    ########################################
    show "Disable the all too sensitive backswipe on trackpads"
    run "defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false"
    run "defaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls -bool false"

    show "Disable the all too sensitive backswipe on Magic Mouse"
    run "defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false"
    run "defaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool false"

    show "Use the system-native print preview dialog"
    run "defaults write com.google.Chrome DisablePrintPreview -bool true"
    run "defaults write com.google.Chrome.canary DisablePrintPreview -bool true"

    show "Expand the print dialog by default"
    run "defaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool true"
    run "defaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 -bool true"

    ########################################
    # Kill affected applications
    ########################################
    run "nohup killall Calendar cfprefsd Contacts Mail mds Messages Photos Safari >/dev/null 2>&1" &
    run "nohup killall 'Activity Monitor' 'Address Book' 'Google Chrome Canary' 'Google Chrome' >/dev/null 2>&1" &
    run "nohup killall Dock Finder >/dev/null 2>&1" &
    run "nohup killall SystemUIServer >/dev/null 2>&1" &
    show -i "Done. Note that some of these changes require a logout/restart to take effect."
}

################################################################################
# Step xcode
################################################################################
step_xcode() {
    run "xcode-select --install"
    if run "cc --version 2>/dev/null 1>&2"; then
        show "Xcode agreement is accepted."
    else
        show "Xcode agreement not accepted..."
        run "sudo xcodebuild -license" || abort "Xcode agreement NOT accepted"
    fi
    show "Xcode Command Line Tools are properly installed."
}

################################################################################
# Step java
################################################################################
step_java() {
    show "Checking if java's installed..."
    run "java -version"
}

################################################################################
# Step brew
################################################################################
ensure_homebrew_updated() {
    if [[ -z "$(which brew)" ]]; then
        abort "Please run step brew first"
    fi

    ensure_no_anaconda

    # unlink keg-only formulas which should not be not symlinked into /usr/local
    KEG_ONLY="bison gettext libffi openssl readline sqlite"
    run "brew unlink $KEG_ONLY"

    run "brew update"
    run "brew upgrade"
}

ensure_homebrew_updated_cleanup() {
    # Force link these keg-only formulas to override outdated system versions.
    # Must be called sometime after ensure_homebrew_updated() has been called,
    # and after any other brew commands such as install have also been called.
    run "brew link --force --overwrite sqlite imagemagick@6"
}

install_brew_formula() {
    local FORMULA_NAME FORMULA="$1"
    FORMULA_NAME="$(basename "$1" "/")"
    shift

    IFS=' ' read -r -a INSTALLED <<<"$@"
    if ! in_array "$FORMULA_NAME" "${INSTALLED[@]}"; then
        # Use Docker for Mac instead of docker-machine.
        # See: https://docs.docker.com/docker-for-mac/
        if [[ "$FORMULA_NAME" == "docker-compose" ]]; then
            run "brew install '$FORMULA' --without-docker-machine"
            show -i "Please install Docker for Mac: https://docs.docker.com/docker-for-mac/"
        else
            run "brew install '$FORMULA'"
        fi
    else
        show "brew formula '$FORMULA' already installed"
    fi

    # Force link the most recent version; can fix some annoying issues,
    # but is also slow and terrible and shouldn't be necessary.
    # run "brew unlink $1 && brew link --force --overwrite $1"
}

step_brew() {
    ensure_no_anaconda

    if [[ -z "$(which brew)" ]]; then
        show "installing homebrew..."
        run "ruby -e \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\""
        export PATH="$PATH:/usr/local/bin" # make sure brew is in your PATH before continuing
    else
        show "Homebrew already installed"
    fi

    if [[ -z "$(which brew)" ]]; then
        abort "failed to install Homebrew"
    fi

    ensure_homebrew_updated

    local INSTALLED
    brew ls -1 | {
        while IFS="" read -r line; do INSTALLED+=("$line"); done
        IFS=' '
        for I in $HOMEBREW_FORMULAS; do
            install_brew_formula "$I" "${INSTALLED[@]}"
        done
    }

    ensure_homebrew_updated_cleanup

    # cmake's bundling utility fails in completely reasonable cases, the following steps are necessary
    run "chmod +w /usr/local/Cellar/freetds/*/lib/*.dylib 2>/dev/null"
    run "chmod +w /usr/local/Cellar/pcre/*/lib/*.dylib 2>/dev/null"

    # install glibtool and glibtoolize as the defaults
    run "ln -sf /usr/local/bin/glibtool /usr/local/bin/libtool"
    run "ln -sf /usr/local/bin/glibtoolize /usr/local/bin/libtoolize"

    # install the git remote-hg helper
    run "ln -sf $(brew ls -v git | grep git-remote-hg) /usr/local/bin"

    local arr=()
    echo "$HOMEBREW_FORMULAS" | tr ' ' '\n' | {
        while IFS="" read -r line; do arr+=("$line"); done
        for I in $(brew ls); do
            name="${I%@*}"
            [[ "$name" == "imagemagick" ]] && name="$name@6"
            [[ "$name" == "pandoc-sidenote" ]] && name="jez/formulae/$name"
            if ! in_array "$name" "${arr[@]}"; then
                case "$I" in
                "go") ;; # installed as a separate step
                *) show -i "$I installed but not managed by setup via brew" ;;
                esac
            fi
        done
    }

    # setup user symlinks for some tools to make IDE integration easier
    run "ln -sf '$(brew --prefix flake8)/bin/flake8' '$HOME/bin/.'"
}

################################################################################
# Step cask
################################################################################
install_brew_cask() {
    local FORMULA_NAME FORMULA="$1"
    FORMULA_NAME="$(basename "$1" "/")"
    shift

    local INSTALLED
    IFS=' ' read -r -a INSTALLED <<<"$@"
    if ! in_array "$FORMULA_NAME" "${INSTALLED[@]}"; then
        run "brew cask install '$FORMULA'"
    else
        show "brew cask formula '$FORMULA' already installed"
    fi
}

step_cask() {
    echo
    show -i "================================================================================"
    show -i "= Installing Casks is ESPECIALLY interactive, you WILL need to babysit this!   ="
    show -i "= For example, many Casks require additional manual steps after installation.  ="
    show -i "================================================================================"
    echo

    ensure_homebrew_updated

    local INSTALLED
    brew cask ls -1 | {
        while IFS="" read -r line; do INSTALLED+=("$line"); done
        IFS=' '
        for I in $HOMEBREW_CASKS; do
            install_brew_cask "$I" "${INSTALLED[@]}"
        done
    }

    ensure_homebrew_updated_cleanup

    IFS=$'\n'
    for I in $(brew cask list); do
        name="${I%@*}"
        if ! echo "$HOMEBREW_CASKS" | egrep -q "$(echo "\\b$name\\b" | sed 's/ (!)//g')"; then
            show -i "$I installed but not managed by setup via brew cask"
        fi
    done
}

################################################################################
# Step atom
################################################################################
install_atom_pkg() {
    local INSTALLED PKG="$1"
    shift
    IFS=' ' read -r -a INSTALLED <<<"$@"

    type apm-beta >/dev/null 2>&1 && APMCMD="apm-beta" || APMCMD="apm"
    if ! in_array "$PKG" "${INSTALLED[@]}"; then
        run "$APMCMD install '$PKG'" || abort "can not install package '$PKG'"
    else
        show "skipping $PKG: already installed"
    fi
}

step_atom() {
    if ! type atom >/dev/null 2>&1; then
        ensure_homebrew_updated
        install_brew_cask atom || abort "can't install atom via brew-cask"
        ensure_homebrew_updated_cleanup
    fi

    # Anaconda causes build issues for Atom packages with native modules.
    ensure_no_anaconda

    type apm-beta >/dev/null 2>&1 && APMCMD="apm-beta" || APMCMD="apm"

    local INSTALLED
    INSTALLED=()
    $APMCMD list --installed --bare | sed "s/@.*$//g" | {
        while IFS="" read -r line; do INSTALLED+=("$line"); done
        IFS=' '
        for I in $ATOM_PACKAGES; do
            install_atom_pkg "$I" "${INSTALLED[@]}"
        done
    }

    run "$APMCMD upgrade --confirm false"

    IFS=$'\n'
    for I in $($APMCMD list --installed --bare); do
        name="${I%@*}"
        if ! echo "$ATOM_PACKAGES" | egrep -qi " ${name}\\b"; then
            show -i "$I installed but not managed by setup via $APMCMD"
        fi
    done
}

################################################################################
# Step code
################################################################################
install_code_pkg() {
    local INSTALLED PKG="$1"
    shift
    IFS=' ' read -r -a INSTALLED <<<"$@"

    if ! in_array "$PKG" "${INSTALLED[@]}"; then
        run "code --install-extension '$PKG'" || abort "can not install package '$PKG'"
    else
        show "skipping $PKG: already installed"
    fi
}

step_code() {
    if ! type code >/dev/null 2>&1; then
        ensure_homebrew_updated
        install_brew_cask visual-studio-code || abort "can't install VS Code via brew-cask"
        ensure_homebrew_updated_cleanup
    fi

    local INSTALLED
    INSTALLED=()
    code --list-extensions | {
        while IFS="" read -r line; do INSTALLED+=("$line"); done
        IFS=' '
        for I in $CODE_PACKAGES; do
            install_code_pkg "$I" "${INSTALLED[@]}"
        done
    }

    IFS=$'\n'
    for I in $(code --list-extensions); do
        name="${I%@*}"
        if ! echo "$CODE_PACKAGES" | egrep -qi "\\b${name}\\b"; then
            show -i "$I installed but not managed by setup via code"
        fi
    done
}

################################################################################
# Step zsh
################################################################################
ensure_add_shell() {
    local BINARY="$1"
    local INSTALLED
    INSTALLED="$(grep "$BINARY" /etc/shells)"
    if [[ "$INSTALLED" == "" ]]; then
        run "echo '$BINARY' | sudo tee -a /etc/shells"
    fi
}

ensure_shell() {
    NAME="$1"
    shift

    ensure_homebrew_updated

    for FORMULA in "$@"; do
        install_brew_formula "$FORMULA"
    done

    ensure_homebrew_updated_cleanup

    SHELL_BINARY="$(brew ls "$NAME" | grep "^.*/bin/.*$NAME\$")"
    ensure_add_shell "$SHELL_BINARY"

    BREW_SHELL_BINARY="$(brew --prefix)/bin/$NAME"
    ensure_add_shell "$BREW_SHELL_BINARY"
    run "sudo chsh -s '$BREW_SHELL_BINARY' '$(whoami)'"
}

step_zsh() {
    ensure_shell zsh zsh
}

################################################################################
# Step bash
################################################################################
step_bash() {
    # Not installing formula bash-completion here, because that is installed
    # by env/install. This is to get the most up to date development version
    # with git (if able), or to install from a tarball if git is not available.
    ensure_shell bash bash
}

################################################################################
# Step python
################################################################################
step_python() {
    # PyYAML is required for yaml2json CLI tool, so it needs to work outside of anaconda environment.
    run "sudo /usr/bin/easy_install --upgrade PyYAML"

    # isort and yapf required for IDE integration, install at the system level
    run "sudo /usr/bin/easy_install --upgrade pip"
    run "sudo /usr/local/bin/pip install isort"
    run "sudo /usr/local/bin/pip install yapf"

    # setup user symlinks for some tools to make IDE integration easier
    run "ln -sf '/usr/local/bin/isort' '$HOME/bin/.'"
    run "ln -sf '/usr/local/bin/yapf' '$HOME/bin/.'"

    local ANACONDA_DIR_NAME="/usr/local/miniconda3"

    # enter existing anaconda environment if it's detected
    [[ -d "$ANACONDA_DIR_NAME/bin" ]] && export PATH="$ANACONDA_DIR_NAME/bin:$PATH"

    if run "type conda >/dev/null 2>&1"; then
        MANAGE_WITH_ANACONDA=0
        if [[ "$MANAGE_WITH_ANACONDA" == 1 ]]; then
            # Allow anaconda to manage all the packages we've installed so that we're reasonably
            # sure that the installed versions will play nicely with each other.
            run "conda update --yes --prefix '$ANACONDA_DIR_NAME' conda"
        else
            # Remove anaconda so that `conda update --all` doesn't stupidly downgrade things.
            # See https://github.com/conda/conda/issues/463 for more details.
            run "conda remove --yes anaconda"
            # Ensures that we get the latest versions possible of installed packages.
            # Though we risk those versions maybe not playing well with each other.
            run "conda update --yes --prefix '$ANACONDA_DIR_NAME' --all"
        fi
    else
        ensure_homebrew_updated
        install_brew_cask miniconda
        ensure_homebrew_updated_cleanup
        export PATH="$ANACONDA_DIR_NAME/bin:$PATH"
        run "conda config --set changeps1 no"
    fi

    # Remove terrible Anaconda launcher apps from desktop (That's not where .app directories go anyway!)
    [[ -d "$HOME/Desktop/Launcher.app" ]] && run "rm -rf '$HOME/Desktop/Launcher.app'"
    [[ -d "$HOME/Desktop/Navigator.app" ]] && run "rm -rf '$HOME/Desktop/Navigator.app'"

    # Install python packages that don't come with Anaconda... yet!
    run "pip install --upgrade pip"
    IFS=' '
    for I in $PIP_PACKAGES; do
        # NOTE: `--ignore-installed` is used here to workaround this issue: https://github.com/pypa/pip/issues/2751
        run "pip install --ignore-installed -qU $I"
    done

    # Install conda packages that don't come pre-installed with Anaconda
    local CONDA_LIST
    CONDA_LIST="$(conda list -e | cut -f1 -d= | egrep -v '^#|^_|anaconda')"
    IFS=' '
    for I in $CONDA_PACKAGES; do
        if ! echo "$CONDA_LIST" | grep -q "$I"; then
            run "conda install -f --yes $I"
        fi
    done

    # Fix annoying ipython settings
    run "ipython profile create"
    run "perl -pi -e 's/.*confirm_exit.*/c.TerminalInteractiveShell.confirm_exit = False/' $HOME/.ipython/profile_default/ipython_config.py"
    run "perl -pi -e 's/.*display_banner.*/c.TerminalIPythonApp.display_banner = False/' $HOME/.ipython/profile_default/ipython_config.py"

    IFS=$'\n'
    for I in $CONDA_LIST; do
        name="${I%@*}"
        if [[ "$name" == "#" || "$name" == "_license" ]]; then
            continue
        fi
        if ! echo "$PIP_PACKAGES" | egrep -q "\\b$name\\b" && ! echo "$CONDA_PACKAGES" | egrep -q "\\b$name\\b"; then
            show -i "$I installed but not managed by setup via pip or anaconda"
        fi
    done
}

################################################################################
# Step gem
################################################################################
ensure_rvm_ruby() {
    if which ruby | grep -q "/usr/bin/ruby"; then
        if [[ ! -e "$HOME/.rvm/scripts/rvm" ]]; then
            run "gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3"
            run "\curl -sSL https://get.rvm.io | bash -s stable" || abort "failed to install rvm"
        fi
        if ! type rvm >/dev/null 2>&1; then
            # shellcheck source=.rvm/scripts/rvm
            test -s "$HOME/.rvm/scripts/rvm" && source "$_"
        fi
        if [[ -z "$(rvm list strings)" ]]; then
            run "rvm install ruby --latest" || abort "could not install ruby via rvm"
            run "rvm alias create default '$(rvm list strings)'"
        fi
    fi

    if ! type rvm >/dev/null 2>&1; then
        abort "rvm not installed"
    fi
    run "rvm get head" || abort "could not update rvm"

    # shellcheck source=.rvm/scripts/rvm
    test -s "$HOME/.rvm/scripts/rvm" && source "$_"
    run "rvm use '$(rvm list default string)'" || abort "could not select default ruby via rvm"
}

step_gem() {
    ensure_rvm_ruby
    if which ruby | grep -q "/usr/bin/ruby"; then
        abort "system ruby detected, please ensure ruby installed via rvm"
    fi

    show "Note that some gems have dependencies that should be installed by brew first..."
    run "yes | gem install rubygems-update"
    run "yes | update_rubygems"
    run "yes | gem update -q --system"

    declare -a GEM_LIST
    GEM_LIST=()
    gem list | {
        while IFS="" read -r line; do GEM_LIST+=("$line"); done
        IFS=' '
        for I in $GEM_PACKAGES; do
            if ! echo "${GEM_LIST[*]}" | grep -q "$I"; then
                run "yes | gem install -q $I"
            fi
        done
    }

    IFS=$'\n'
    for I in $(gem outdated | awk '{print $1}'); do
        run "yes | gem update -q $I"
    done

    IFS=$'\n'
    for I in $(gem list -l); do
        name="${I%@*}"
        if [[ "$name" == "*** LOCAL GEMS ***" ]]; then
            continue
        fi
        if ! echo "$GEM_PACKAGES rubygems-update" | egrep -q "$(echo "\\b$name\\b" | cut -d' ' -f1)"; then
            show -i "$I installed but not managed by setup via gem"
        fi
    done
}

################################################################################
# Step node
################################################################################
step_node() {
    if ! type node >/dev/null 2>&1; then
        ensure_homebrew_updated
        install_brew_formula node
        ensure_homebrew_updated_cleanup
    elif type brew >/dev/null 2>&1; then
        run "brew upgrade cargo"
    fi

    # Ensure that we're installing to the system's Node
    if type nvm >/dev/null 2>&1; then
        run "nvm alias default system"
        run "nvm use system"
    fi

    # Homebrew Caveat
    # If you update npm itself, do NOT use the npm update command.
    # The upstream-recommended way to update npm is:
    run "npm install -g npm@latest"
    run "npm update -g"

    local INSTALLED
    INSTALLED="$(npm list -g --depth 0 | grep @ | cut -d' ' -f2 | cut -d@ -f1)"

    IFS=' '
    for I in $NODE_MODULES; do
        if ! echo "$INSTALLED" | egrep -q "\b$I\b"; then
            run "npm install -g $I"
        fi
    done

    IFS=$'\n'
    for I in $INSTALLED; do
        name="${I%@*}"
        if [[ "$name" == "npm" ]]; then
            continue
        fi
        if ! echo "$NODE_MODULES" | egrep -q "\b$name\b"; then
            show -i "$I installed but not managed by setup via npm"
        fi
    done
}

################################################################################
# Step go
################################################################################
step_go() {
    if ! type go >/dev/null 2>&1; then
        ensure_homebrew_updated
        install_brew_formula go
        ensure_homebrew_updated_cleanup
    elif type brew >/dev/null 2>&1; then
        run "brew upgrade cargo"
    fi

    export GOPATH="/usr/local/lib/gopath"
    mkdir -p "$GOPATH"
    export PATH="$PATH:$GOPATH"

    run "go get -u all"

    if ! type golist >/dev/null 2>&1; then
        show -i "Utility golist is not installed in your PATH."
        show -i "Please install it from https://github.com/lexicalunit/dotfiles/blob/master/bin/golist"
        return 1
    fi

    INSTALLED="$(golist | tr '\n' ' ')"

    IFS=' '
    for I in $GO_PACKAGES; do
        if ! echo "$INSTALLED" | egrep -q "\b$I\b"; then
            run "go get -u $I"
        fi
    done

    IFS=' '
    for install_name in $INSTALLED; do
        FOUND="false"
        for pkg in $GO_PACKAGES; do
            if echo "$install_name" | egrep -q "\b$pkg\b"; then
                FOUND="true"
                break
            fi
        done
        if [[ "$FOUND" != "true" ]]; then
            show -i "$install_name installed but not managed by setup via go get"
        fi
    done
}

################################################################################
# Step cargo
################################################################################
step_cargo() {
    if ! type rustc >/dev/null 2>&1; then
        ensure_homebrew_updated
        install_brew_formula rust
        ensure_homebrew_updated_cleanup
    elif type brew >/dev/null 2>&1; then
        run "brew upgrade rust"
    fi

    declare -a INSTALLED
    INSTALLED=()
    cargo install --list | grep -v "^ " | sed 's/ v.*//g' | {
        while IFS="" read -r line; do INSTALLED+=("$line"); done
        IFS=' '
        for I in $CARGO_PACKAGES; do
            if ! echo "${INSTALLED[*]}" | egrep -q "\b$I\b"; then
                run "cargo install $I"
            fi
        done
    }

    run "cargo install-update -a"

    IFS=' '
    for install_name in $(cargo install --list | grep -v "^ " | sed 's/ v.*//g'); do
        echo ") $install_name"
        FOUND="false"
        for pkg in $CARGO_PACKAGES; do
            echo "  - $pkg"
            if echo "$install_name" | egrep -q "\b$pkg\b"; then
                FOUND="true"
                break
            fi
        done
        if [[ "$FOUND" != "true" ]]; then
            show -i "$install_name installed but not managed by setup via cargo"
        fi
    done
}

################################################################################
# Step env
################################################################################
step_env() {
    # install submodules
    run "cd '$HOME'" || exit 1
    run "git submodule update --init --recursive"
    run "git submodule update --init --recursive --remote"

    # install my prezto prompt
    if [[ -d ".zprezto/modules/prompt/functions" ]]; then
        run "cp -uvf '$HOME/env/prompt_lexical_setup' '$HOME/.zprezto/modules/prompt/functions'"
    fi

    # install git hooks
    run "cd '$HOME/.git/hooks'" || exit 1
    run "ln -sf '../../env/pre-commit' ."
    run "ln -sf '../../env/post-commit' ."

    # install fonts
    run "cp -uvf '$HOME'/env/*.otf /Library/Fonts/."
}

################################################################################
# Main
################################################################################
if [[ $(id -u) == 0 ]]; then
    echo "Do not run this script as root." >&2
    exit 1
fi

if echo "$*" | egrep -q -- "\b--help\b|\b-h\b"; then
    usage
fi

if echo "$*" | egrep -q -- "\b--items\b|\b-i\b"; then
    IFS=' '
    for I in "${ITEM_LISTS[@]}"; do
        cleanup_item_list "$I"
    done
    exit 0
fi

OPTIND=1
LISTING=0
FORCE=0
ALL=0
DRYRUN=0
while getopts "lfd" opt; do
    case "$opt" in
    l) LISTING=1 ;;
    f) FORCE=1 ;;
    d) DRYRUN=1 ;;
    *) usage ;;
    esac
done
shift $((OPTIND - 1))

# export force/dryrun settings to shell control variables (see ~/.shell_control)
export SC_FORCE="$FORCE"
export SC_DRYRUN="$DRYRUN"

if [[ $LISTING == 0 && -z "$1" ]]; then
    usage
fi

[[ $1 == all ]] && ALL=1

# key;  question
steps=(
    "xcode;         Ensure that Xcode Command Line Tools are installed"
    "java;          Ensure that Apple's java for macOS is installed"
    "brew;          Ensure Homebrew installed and formulas upgraded"
    "cask;          Ensure Homebrew Casks are installed"
    "zsh;           Ensure shell is latest version of zsh from Homebrew"
    "env;           Update envrionment configuration and submodules"
    "python;        Upgrade/Install Anaconda, pip packages, and conda packages"
    "node;          Ensure Node modules are installed via npm"
    "go;            Ensure Go packages are installed"
    "cargo;         Ensure Rust packages are installed via cargo"
    "gem;           Upgrade/Install gem packages and rubygems-update package"
    "atom;          Ensure Atom installed via Homebrew Cask and apm packages are upgraded"
    "code;          Ensure VS Code installed via Homebrew Cask and its packages are installed"
    "osx;           Override macOS \"defaults\" settings and configuration"
)

LISTING_OUTPUT=""

IFS=$'\n'
let steps_taken=0
for step in "${steps[@]}"; do
    key="$(echo "$step" | cut -d';' -f1)"
    question="$(echo "$step" | cut -d';' -f2 | sed 's/^ *//g')"
    function="step_$key"

    if [[ $LISTING == 1 ]]; then
        LISTING_OUTPUT="$LISTING_OUTPUT$key: $question"$'\n'
        continue
    fi

    if [[ $ALL == 0 ]] && ! echo "$*" | egrep -q "\b$key\b"; then
        continue
    fi

    let steps_taken=$((steps_taken + 1))
    ask "[$key] $question?"
    if [[ "$REPLY" == "y" ]]; then
        show "Beginning step [$key]"
        eval "$function"
    fi
done

if [[ $LISTING == 1 ]]; then
    echo -n "$LISTING_OUTPUT" | column -ts:
fi

if [[ $LISTING == 0 && $steps_taken == 0 ]]; then
    abort "invalid step name(s): $(echo "$*" | tr '\n' ' ')"
fi
